package wolfPub;

import java.sql.*;

public class City {
	private String cityname;
	
	private int userId;
	private int cityID;
	
	
	
	
	public City(String cityname, int userID) {
		super();
		this.cityname = cityname;
		this.userId = userID;
		Database db = new Database();
		Connection con = db.getConnection(false);
		if(con == null) {
			System.out.println("Failed to establish the connection");
			System.exit(0);
		}
		try {
			CallableStatement cstmt = con.prepareCall("{call sp_add_city(?, ? )}");
			
			
			cstmt.setString(1,this.cityname);
			cstmt.setInt(2, userID);
			cstmt.executeUpdate();

			
			cstmt = con.prepareCall("{call sp_get_city_id(?,?)}");
			cstmt.setString(1,this.cityname);
			cstmt.registerOutParameter("o_city_id", Types.INTEGER);
			
			
			 cstmt.execute();
			
			
			this.cityID = cstmt.getInt("o_city_id");
		}
		catch (Exception e){
			System.out.println(e);
		}
		finally {
	        db.closeConnection(con);
		}	
	}
	public City() {
		this.cityID = -1;
		this.cityname = null;
	}
	public String getCityname() {
		
		return this.cityname;
	}
	public void setCityname(String cityname) {
		this.cityname = cityname;
	}

	public static City getCityByName(String cityname) {
		Database db = new Database();
		City newCity= new City();
		Connection con = db.getConnection(false);
		if(con == null) {
			System.out.println("Failed to establish the connection");
			System.exit(0);
		}
		try {
			CallableStatement cstmt = con.prepareCall("{call sp_get_city_id(?,?)}");			
			cstmt.setString(1,cityname);
			cstmt.registerOutParameter(2, Types.INTEGER);
//			System.out.println(cstmt.execute());
//			System.out.println(cstmt.getResult());
			boolean s= cstmt.execute();
		
			while (s) {
				ResultSet rs = cstmt.getResultSet();
				System.out.println(rs.getInt(0));
				
				s = cstmt.getMoreResults();
				
			}
			
			
				
			newCity.setCityID(cstmt.getInt(2));
			newCity.setCityname(cityname);
			
		
			
			
			
		}
		catch (Exception e){
			System.out.println(e);
		}
		finally {
	        db.closeConnection(con);
		}	
		return newCity;
	}
	
	public int getCityId() {
		return this.cityID;
	}
	
	public static void removeCity(String Name, int userID) {
		Database db = new Database();
		Connection con = db.getConnection(false);
		if(con == null) {
			System.out.println("Failed to establish the connection");
			System.exit(0);
		}
		try {
//			1
			CallableStatement cstmt = con.prepareCall("{call sp_remove_city(?,?)}");
			cstmt.setString(1,Name);
			cstmt.setInt(2, userID);
			cstmt.executeUpdate();
		}
		catch (SQLException e){
			
		}
		finally {
	        db.closeConnection(con);
		}	
	}
	public void setCityID(int cityID) {
		
		this.cityID = cityID;
	}

	
	
	

}





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































